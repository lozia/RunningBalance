openapi: 3.0.0
info:
  title: myPost API
  version: 1.0.0
  description: myPost API can be used for managing posts the user sent
servers:
  - url: https://example.com/api/v1

paths:
  /users:
    post:
      summary: Create user account
      requestBody:
        description: User object that needs to be added to the system
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "409":
          description: User already exists

  /users/{userId}/personalinfo:
    post:
      summary: Create personal information for user
      parameters:
        - in: path
          name: userId
          description: ID of the user to update
          required: true
          schema:
            type: integer
            minimum: 1
        - in: header
          name: Authorization
          description: Access token to authenticate the request
          required: true
          schema:
            type: string
      requestBody:
        description: Personal information object that needs to be added to the user's profile
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonalInfo"
      responses:
        "201":
          description: Personal information created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonalInfo"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized access
        "404":
          description: User not found

  /users/{userId}/posts:
    post:
      summary: Create a new post for user
      parameters:
        - in: path
          name: userId
          description: ID of the user to create a post for
          required: true
          schema:
            type: integer
            minimum: 1
        - in: header
          name: Authorization
          description: Access token to authenticate the request
          required: true
          schema:
            type: string
      requestBody:
        description: Post object that needs to be added to the user's profile
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized access
        "404":
          description: User not found

paths:
  /users/{userId}/posts/{postId}:
    delete:
      summary: Delete a post
      tags: [Posts]
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/postId'
      responses:
        '204':
          description: Post deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/following:
    post:
      summary: Follow a blogger by id
      tags: [Followers]
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/FollowRequest'
      responses:
        '201':
          description: User followed successfully
        '400':
          $ref: '#/components/responses/BadRequest'

  /users/{userId}/following/{bloggerId}:
    delete:
      summary: Unfollow a blogger
      tags: [Followers]
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/bloggerId'
      responses:
        '204':
          description: User unfollowed successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /users/{userId}/chats:
    post:
      summary: Create a chat with another user
      tags: [Chats]
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/ChatRequest'
      responses:
        '201':
          $ref: '#/components/responses/ChatResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 123
        username:
          type: string
          description: Username of the user
          example: taylor_swift
        password:
          type: string
          description: Password of the user
          example: Password123!
        email:
          type: string
          description: Email of the user
          example: taylor_swift@example.com
        name:
          type: string
          description: Full name of the user
          example: Taylor Swift
        gender:
          type: string
          enum: [male, female, other]
          description: Gender of the user
          example: female
        age:
          type: integer
          description: Age of the user
          example: 25
        introduction:
          type: string
          description: Introduction of the user
          example: Hi, I'm Taylor and I like singing.

    Blog:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the post
          example: 456
        title:
          type: string
          description: Title of the post
          example: My life in Boston
        content:
          type: string
          description: Content of the post
          example: |
            I like Boston!
        author:
          $ref: '#/components/schemas/User'
          description: Author of the post
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the post was created
          example: '2023-03-22T10:30:00Z'

    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the chat message
          example: 789
        sender:
          $ref: '#/components/schemas/User'
          description: Sender of the chat message
        receiver:
          $ref: '#/components/schemas/User'
          description: Receiver of the chat message
        message:
          type: string
          description: Content of the chat message
          example: Hi there, how are you?
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the chat message was created
          example: '2023-03-22T11:00:00Z'
